// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/federation/federation.proto

package federation

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Document struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields               *any.Any `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_07173ddef4f7d83d, []int{0}
}

func (m *Document) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Document.Unmarshal(m, b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Document.Marshal(b, m, deterministic)
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return xxx_messageInfo_Document.Size(m)
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Document) GetFields() *any.Any {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateResult struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateResult) Reset()         { *m = UpdateResult{} }
func (m *UpdateResult) String() string { return proto.CompactTextString(m) }
func (*UpdateResult) ProtoMessage()    {}
func (*UpdateResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_07173ddef4f7d83d, []int{1}
}

func (m *UpdateResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResult.Unmarshal(m, b)
}
func (m *UpdateResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResult.Marshal(b, m, deterministic)
}
func (m *UpdateResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResult.Merge(m, src)
}
func (m *UpdateResult) XXX_Size() int {
	return xxx_messageInfo_UpdateResult.Size(m)
}
func (m *UpdateResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResult proto.InternalMessageInfo

func (m *UpdateResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SearchRequest struct {
	SearchRequest        *any.Any `protobuf:"bytes,1,opt,name=search_request,json=searchRequest,proto3" json:"search_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07173ddef4f7d83d, []int{2}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetSearchRequest() *any.Any {
	if m != nil {
		return m.SearchRequest
	}
	return nil
}

type SearchResponse struct {
	SearchResult         *any.Any `protobuf:"bytes,1,opt,name=search_result,json=searchResult,proto3" json:"search_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07173ddef4f7d83d, []int{3}
}

func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse.Unmarshal(m, b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return xxx_messageInfo_SearchResponse.Size(m)
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetSearchResult() *any.Any {
	if m != nil {
		return m.SearchResult
	}
	return nil
}

func init() {
	proto.RegisterType((*Document)(nil), "federation.Document")
	proto.RegisterType((*UpdateResult)(nil), "federation.UpdateResult")
	proto.RegisterType((*SearchRequest)(nil), "federation.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "federation.SearchResponse")
}

func init() {
	proto.RegisterFile("protobuf/federation/federation.proto", fileDescriptor_07173ddef4f7d83d)
}

var fileDescriptor_07173ddef4f7d83d = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4f, 0xc2, 0x30,
	0x18, 0x86, 0x19, 0x86, 0x45, 0x3f, 0x81, 0x43, 0xc3, 0x01, 0x76, 0x22, 0x0d, 0x07, 0x12, 0x75,
	0x4b, 0xe0, 0x64, 0xf0, 0x82, 0x21, 0xfe, 0x88, 0x9e, 0x66, 0xbc, 0x78, 0x31, 0xdd, 0xfa, 0x01,
	0x8b, 0xa3, 0xc5, 0xb5, 0x4d, 0xe4, 0xaf, 0xd7, 0xb0, 0x3a, 0xac, 0x09, 0x78, 0xf0, 0xb6, 0xbd,
	0x7d, 0xdf, 0x67, 0xcb, 0x93, 0xc2, 0x60, 0x5d, 0x48, 0x2d, 0x13, 0x33, 0x8f, 0xe6, 0xc8, 0xb1,
	0x60, 0x3a, 0x93, 0xc2, 0x79, 0x0c, 0xcb, 0x63, 0x02, 0x3f, 0x49, 0xd0, 0x5b, 0x48, 0xb9, 0xc8,
	0x31, 0xda, 0x0d, 0x99, 0xd8, 0xd8, 0x1a, 0xbd, 0x83, 0xe3, 0x99, 0x4c, 0xcd, 0x0a, 0x85, 0x26,
	0x6d, 0xa8, 0x67, 0xbc, 0xeb, 0xf5, 0xbd, 0xe1, 0x49, 0x5c, 0xcf, 0x38, 0x39, 0x07, 0x7f, 0x9e,
	0x61, 0xce, 0x55, 0xb7, 0xde, 0xf7, 0x86, 0xa7, 0xa3, 0x4e, 0x68, 0x39, 0x61, 0xc5, 0x09, 0xa7,
	0x62, 0x13, 0x7f, 0x77, 0xe8, 0x00, 0x9a, 0xcf, 0x6b, 0xce, 0x34, 0xc6, 0xa8, 0x4c, 0xae, 0x49,
	0x07, 0x1a, 0xa9, 0x34, 0x42, 0x97, 0xc0, 0x46, 0x6c, 0x5f, 0xe8, 0x23, 0xb4, 0x9e, 0x90, 0x15,
	0xe9, 0x32, 0xc6, 0x77, 0x83, 0x4a, 0x93, 0x09, 0xb4, 0x55, 0x19, 0xbc, 0x16, 0x36, 0x29, 0xfb,
	0x87, 0x3e, 0xd6, 0x52, 0xee, 0x98, 0x3e, 0x40, 0xbb, 0xa2, 0xa9, 0xb5, 0x14, 0x0a, 0xc9, 0x25,
	0xb4, 0x76, 0xb8, 0xed, 0x6f, 0xfc, 0x49, 0x6b, 0x56, 0xb4, 0x6d, 0x73, 0xf4, 0xe9, 0x01, 0xdc,
	0xec, 0xa4, 0x91, 0x31, 0x1c, 0xdd, 0xa2, 0x26, 0x9d, 0xd0, 0x51, 0x5b, 0xa9, 0x0a, 0xf6, 0xa6,
	0xb4, 0x46, 0x26, 0xd0, 0xb8, 0x17, 0x1c, 0x3f, 0x0e, 0xcc, 0xba, 0x6e, 0xea, 0xda, 0xa2, 0xb5,
	0xa1, 0x47, 0xae, 0xc0, 0x9f, 0x61, 0x8e, 0x1a, 0xff, 0xb5, 0x9e, 0x82, 0x6f, 0x5d, 0x90, 0x9e,
	0xdb, 0xfb, 0x65, 0x3b, 0x08, 0xf6, 0x1d, 0x59, 0x75, 0xb4, 0x76, 0x7d, 0xf1, 0x72, 0xb6, 0xc8,
	0xf4, 0xd2, 0x24, 0x61, 0x2a, 0x57, 0xd1, 0x4a, 0x2a, 0xf3, 0xc6, 0xa2, 0x24, 0x67, 0x4a, 0x47,
	0x7b, 0xee, 0x5c, 0xe2, 0x97, 0xe1, 0xf8, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x04, 0xd1, 0x3e, 0x9a,
	0x91, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FederationClient is the client API for Federation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FederationClient interface {
	Get(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error)
	Index(ctx context.Context, opts ...grpc.CallOption) (Federation_IndexClient, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (Federation_DeleteClient, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type federationClient struct {
	cc *grpc.ClientConn
}

func NewFederationClient(cc *grpc.ClientConn) FederationClient {
	return &federationClient{cc}
}

func (c *federationClient) Get(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/federation.Federation/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationClient) Index(ctx context.Context, opts ...grpc.CallOption) (Federation_IndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Federation_serviceDesc.Streams[0], "/federation.Federation/Index", opts...)
	if err != nil {
		return nil, err
	}
	x := &federationIndexClient{stream}
	return x, nil
}

type Federation_IndexClient interface {
	Send(*Document) error
	CloseAndRecv() (*UpdateResult, error)
	grpc.ClientStream
}

type federationIndexClient struct {
	grpc.ClientStream
}

func (x *federationIndexClient) Send(m *Document) error {
	return x.ClientStream.SendMsg(m)
}

func (x *federationIndexClient) CloseAndRecv() (*UpdateResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *federationClient) Delete(ctx context.Context, opts ...grpc.CallOption) (Federation_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Federation_serviceDesc.Streams[1], "/federation.Federation/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &federationDeleteClient{stream}
	return x, nil
}

type Federation_DeleteClient interface {
	Send(*Document) error
	CloseAndRecv() (*UpdateResult, error)
	grpc.ClientStream
}

type federationDeleteClient struct {
	grpc.ClientStream
}

func (x *federationDeleteClient) Send(m *Document) error {
	return x.ClientStream.SendMsg(m)
}

func (x *federationDeleteClient) CloseAndRecv() (*UpdateResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *federationClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/federation.Federation/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederationServer is the server API for Federation service.
type FederationServer interface {
	Get(context.Context, *Document) (*Document, error)
	Index(Federation_IndexServer) error
	Delete(Federation_DeleteServer) error
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterFederationServer(s *grpc.Server, srv FederationServer) {
	s.RegisterService(&_Federation_serviceDesc, srv)
}

func _Federation_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/federation.Federation/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationServer).Get(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _Federation_Index_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FederationServer).Index(&federationIndexServer{stream})
}

type Federation_IndexServer interface {
	SendAndClose(*UpdateResult) error
	Recv() (*Document, error)
	grpc.ServerStream
}

type federationIndexServer struct {
	grpc.ServerStream
}

func (x *federationIndexServer) SendAndClose(m *UpdateResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *federationIndexServer) Recv() (*Document, error) {
	m := new(Document)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Federation_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FederationServer).Delete(&federationDeleteServer{stream})
}

type Federation_DeleteServer interface {
	SendAndClose(*UpdateResult) error
	Recv() (*Document, error)
	grpc.ServerStream
}

type federationDeleteServer struct {
	grpc.ServerStream
}

func (x *federationDeleteServer) SendAndClose(m *UpdateResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *federationDeleteServer) Recv() (*Document, error) {
	m := new(Document)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Federation_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/federation.Federation/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Federation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "federation.Federation",
	HandlerType: (*FederationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Federation_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Federation_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Index",
			Handler:       _Federation_Index_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _Federation_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/federation/federation.proto",
}
