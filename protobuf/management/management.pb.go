// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/management/management.proto

package management

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	raft "github.com/mosuka/blast/protobuf/raft"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LivenessStatus_State int32

const (
	LivenessStatus_UNKNOWN LivenessStatus_State = 0
	LivenessStatus_ALIVE   LivenessStatus_State = 1
	LivenessStatus_DEAD    LivenessStatus_State = 2
)

var LivenessStatus_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "ALIVE",
	2: "DEAD",
}

var LivenessStatus_State_value = map[string]int32{
	"UNKNOWN": 0,
	"ALIVE":   1,
	"DEAD":    2,
}

func (x LivenessStatus_State) String() string {
	return proto.EnumName(LivenessStatus_State_name, int32(x))
}

func (LivenessStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{0, 0}
}

type ReadinessStatus_State int32

const (
	ReadinessStatus_UNKNOWN   ReadinessStatus_State = 0
	ReadinessStatus_READY     ReadinessStatus_State = 1
	ReadinessStatus_NOT_READY ReadinessStatus_State = 2
)

var ReadinessStatus_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "READY",
	2: "NOT_READY",
}

var ReadinessStatus_State_value = map[string]int32{
	"UNKNOWN":   0,
	"READY":     1,
	"NOT_READY": 2,
}

func (x ReadinessStatus_State) String() string {
	return proto.EnumName(ReadinessStatus_State_name, int32(x))
}

func (ReadinessStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{1, 0}
}

type ManagementCommand_Type int32

const (
	ManagementCommand_UNKNOWN_COMMAND       ManagementCommand_Type = 0
	ManagementCommand_SET_NODE              ManagementCommand_Type = 1
	ManagementCommand_DELETE_NODE           ManagementCommand_Type = 2
	ManagementCommand_PUT_KEY_VALUE_PAIR    ManagementCommand_Type = 3
	ManagementCommand_DELETE_KEY_VALUE_PAIR ManagementCommand_Type = 4
)

var ManagementCommand_Type_name = map[int32]string{
	0: "UNKNOWN_COMMAND",
	1: "SET_NODE",
	2: "DELETE_NODE",
	3: "PUT_KEY_VALUE_PAIR",
	4: "DELETE_KEY_VALUE_PAIR",
}

var ManagementCommand_Type_value = map[string]int32{
	"UNKNOWN_COMMAND":       0,
	"SET_NODE":              1,
	"DELETE_NODE":           2,
	"PUT_KEY_VALUE_PAIR":    3,
	"DELETE_KEY_VALUE_PAIR": 4,
}

func (x ManagementCommand_Type) String() string {
	return proto.EnumName(ManagementCommand_Type_name, int32(x))
}

func (ManagementCommand_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{3, 0}
}

type LivenessStatus struct {
	State                LivenessStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=management.LivenessStatus_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LivenessStatus) Reset()         { *m = LivenessStatus{} }
func (m *LivenessStatus) String() string { return proto.CompactTextString(m) }
func (*LivenessStatus) ProtoMessage()    {}
func (*LivenessStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{0}
}

func (m *LivenessStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LivenessStatus.Unmarshal(m, b)
}
func (m *LivenessStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LivenessStatus.Marshal(b, m, deterministic)
}
func (m *LivenessStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LivenessStatus.Merge(m, src)
}
func (m *LivenessStatus) XXX_Size() int {
	return xxx_messageInfo_LivenessStatus.Size(m)
}
func (m *LivenessStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LivenessStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LivenessStatus proto.InternalMessageInfo

func (m *LivenessStatus) GetState() LivenessStatus_State {
	if m != nil {
		return m.State
	}
	return LivenessStatus_UNKNOWN
}

type ReadinessStatus struct {
	State                ReadinessStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=management.ReadinessStatus_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReadinessStatus) Reset()         { *m = ReadinessStatus{} }
func (m *ReadinessStatus) String() string { return proto.CompactTextString(m) }
func (*ReadinessStatus) ProtoMessage()    {}
func (*ReadinessStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{1}
}

func (m *ReadinessStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadinessStatus.Unmarshal(m, b)
}
func (m *ReadinessStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadinessStatus.Marshal(b, m, deterministic)
}
func (m *ReadinessStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadinessStatus.Merge(m, src)
}
func (m *ReadinessStatus) XXX_Size() int {
	return xxx_messageInfo_ReadinessStatus.Size(m)
}
func (m *ReadinessStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadinessStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReadinessStatus proto.InternalMessageInfo

func (m *ReadinessStatus) GetState() ReadinessStatus_State {
	if m != nil {
		return m.State
	}
	return ReadinessStatus_UNKNOWN
}

type KeyValuePair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                *any.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{2}
}

func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() *any.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

type ManagementCommand struct {
	Type                 ManagementCommand_Type `protobuf:"varint,1,opt,name=type,proto3,enum=management.ManagementCommand_Type" json:"type,omitempty"`
	Data                 *any.Any               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ManagementCommand) Reset()         { *m = ManagementCommand{} }
func (m *ManagementCommand) String() string { return proto.CompactTextString(m) }
func (*ManagementCommand) ProtoMessage()    {}
func (*ManagementCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e030ad796566078, []int{3}
}

func (m *ManagementCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementCommand.Unmarshal(m, b)
}
func (m *ManagementCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementCommand.Marshal(b, m, deterministic)
}
func (m *ManagementCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementCommand.Merge(m, src)
}
func (m *ManagementCommand) XXX_Size() int {
	return xxx_messageInfo_ManagementCommand.Size(m)
}
func (m *ManagementCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementCommand proto.InternalMessageInfo

func (m *ManagementCommand) GetType() ManagementCommand_Type {
	if m != nil {
		return m.Type
	}
	return ManagementCommand_UNKNOWN_COMMAND
}

func (m *ManagementCommand) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("management.LivenessStatus_State", LivenessStatus_State_name, LivenessStatus_State_value)
	proto.RegisterEnum("management.ReadinessStatus_State", ReadinessStatus_State_name, ReadinessStatus_State_value)
	proto.RegisterEnum("management.ManagementCommand_Type", ManagementCommand_Type_name, ManagementCommand_Type_value)
	proto.RegisterType((*LivenessStatus)(nil), "management.LivenessStatus")
	proto.RegisterType((*ReadinessStatus)(nil), "management.ReadinessStatus")
	proto.RegisterType((*KeyValuePair)(nil), "management.KeyValuePair")
	proto.RegisterType((*ManagementCommand)(nil), "management.ManagementCommand")
}

func init() {
	proto.RegisterFile("protobuf/management/management.proto", fileDescriptor_5e030ad796566078)
}

var fileDescriptor_5e030ad796566078 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdb, 0x4e, 0xdb, 0x40,
	0x10, 0x86, 0xed, 0xc4, 0xe6, 0x30, 0x9c, 0xdc, 0x69, 0x8b, 0x82, 0xb9, 0xa1, 0xab, 0x5e, 0xd0,
	0x03, 0x76, 0x45, 0x55, 0xaa, 0xaa, 0x48, 0x95, 0x8b, 0xad, 0x88, 0x62, 0x9c, 0xc8, 0x09, 0x20,
	0x7a, 0x63, 0x6d, 0xc8, 0x12, 0x22, 0x62, 0x3b, 0x8a, 0xd7, 0x48, 0xee, 0x83, 0xf4, 0x09, 0xfb,
	0x20, 0x95, 0x6d, 0x12, 0x9c, 0x50, 0x47, 0x15, 0x37, 0xc9, 0xee, 0xcc, 0x37, 0xfb, 0xff, 0x3b,
	0x9a, 0x35, 0xbc, 0x1e, 0x8e, 0x42, 0x1e, 0x76, 0xe2, 0x6b, 0xdd, 0xa7, 0x01, 0xed, 0x31, 0x9f,
	0x05, 0xbc, 0xb0, 0xd4, 0xb2, 0x34, 0xc2, 0x43, 0x44, 0xdd, 0xea, 0x85, 0x61, 0x6f, 0xc0, 0xf4,
	0x49, 0x21, 0x0d, 0x92, 0x1c, 0x53, 0xb7, 0x67, 0x53, 0xcc, 0x1f, 0xf2, 0x71, 0xb2, 0x36, 0x89,
	0x8e, 0xe8, 0x35, 0xcf, 0x7e, 0xf2, 0x0c, 0x89, 0x60, 0xdd, 0xee, 0xdf, 0xb1, 0x80, 0x45, 0x51,
	0x8b, 0x53, 0x1e, 0x47, 0x78, 0x00, 0x72, 0xc4, 0x29, 0x67, 0x35, 0x71, 0x47, 0xdc, 0x5d, 0xdf,
	0xdf, 0xd1, 0x0a, 0x8e, 0xa6, 0x51, 0x2d, 0xfd, 0x63, 0x6e, 0x8e, 0x93, 0x37, 0x20, 0x67, 0x7b,
	0x5c, 0x81, 0xc5, 0x33, 0xe7, 0xc4, 0x69, 0x5c, 0x38, 0x8a, 0x80, 0xcb, 0x20, 0x1b, 0xf6, 0xf1,
	0xb9, 0xa5, 0x88, 0xb8, 0x04, 0x92, 0x69, 0x19, 0xa6, 0x52, 0x21, 0xbf, 0x60, 0xc3, 0x65, 0xb4,
	0xdb, 0x2f, 0xa8, 0x7e, 0x9e, 0x56, 0x7d, 0x55, 0x54, 0x9d, 0x61, 0xa7, 0x65, 0xb5, 0x32, 0x59,
	0xd7, 0x32, 0xcc, 0x4b, 0x45, 0xc4, 0x35, 0x58, 0x76, 0x1a, 0x6d, 0x2f, 0xdf, 0x56, 0x88, 0x0d,
	0xab, 0x27, 0x2c, 0x39, 0xa7, 0x83, 0x98, 0x35, 0x69, 0x7f, 0x84, 0x0a, 0x54, 0x6f, 0x59, 0x92,
	0xc9, 0x2e, 0xbb, 0xe9, 0x12, 0xdf, 0x82, 0x7c, 0x97, 0xa6, 0x6b, 0x95, 0x1d, 0x71, 0x77, 0x65,
	0xff, 0x85, 0x96, 0x77, 0x56, 0x1b, 0xf7, 0x50, 0x33, 0x82, 0xc4, 0xcd, 0x11, 0xf2, 0x47, 0x84,
	0x67, 0xa7, 0x13, 0xa7, 0x47, 0xa1, 0xef, 0xd3, 0xa0, 0x8b, 0x07, 0x20, 0xf1, 0x64, 0x38, 0xbe,
	0x0b, 0x29, 0xde, 0xe5, 0x11, 0xac, 0xb5, 0x93, 0x21, 0x73, 0x33, 0x1e, 0x77, 0x41, 0xea, 0x52,
	0x4e, 0xe7, 0x0a, 0x67, 0x04, 0xf1, 0x41, 0x4a, 0xeb, 0xf0, 0x39, 0x6c, 0xdc, 0x5f, 0xda, 0x3b,
	0x6a, 0x9c, 0x9e, 0x1a, 0x8e, 0xa9, 0x08, 0xb8, 0x0a, 0x4b, 0x2d, 0xab, 0xed, 0x39, 0x0d, 0x33,
	0x6d, 0xfb, 0x06, 0xac, 0x98, 0x96, 0x6d, 0xb5, 0xad, 0x3c, 0x50, 0xc1, 0x4d, 0xc0, 0xe6, 0x59,
	0xdb, 0x3b, 0xb1, 0x2e, 0xbd, 0x73, 0xc3, 0x3e, 0xb3, 0xbc, 0xa6, 0x71, 0xec, 0x2a, 0x55, 0xdc,
	0x82, 0x97, 0xf7, 0xe0, 0x4c, 0x4a, 0xda, 0xff, 0x2d, 0x03, 0x3c, 0x38, 0xc7, 0xf7, 0x20, 0xfd,
	0x08, 0xfb, 0x01, 0x82, 0x96, 0x4d, 0x92, 0x13, 0x76, 0x99, 0xba, 0xf9, 0xc8, 0xad, 0x95, 0x0e,
	0x20, 0x11, 0x70, 0x0f, 0x64, 0x9b, 0xd1, 0x3b, 0xf6, 0x9f, 0xb8, 0x0e, 0x8b, 0x75, 0xc6, 0x53,
	0x08, 0x4b, 0x20, 0xb5, 0x70, 0x10, 0x11, 0xf0, 0x13, 0x40, 0x9d, 0xf1, 0xa3, 0x41, 0x1c, 0x71,
	0x36, 0x2a, 0xad, 0x59, 0xcb, 0x6b, 0xee, 0x31, 0x22, 0xe0, 0x21, 0x2c, 0xb5, 0x02, 0x3a, 0x8c,
	0x6e, 0x42, 0x5e, 0x5a, 0x54, 0xee, 0xd2, 0x82, 0xb5, 0xf1, 0x63, 0x68, 0x8e, 0xc2, 0x4e, 0xb9,
	0x57, 0xb5, 0xfc, 0xfd, 0x10, 0x01, 0xeb, 0xb0, 0x3e, 0x99, 0xee, 0xf9, 0xe7, 0x6c, 0xcf, 0x79,
	0x11, 0x44, 0xc0, 0xaf, 0x50, 0xad, 0x33, 0x8e, 0xb5, 0x22, 0x55, 0x9c, 0x73, 0xb5, 0x34, 0x43,
	0x04, 0xfc, 0x02, 0xd5, 0xd6, 0xdc, 0xe2, 0xf2, 0x3e, 0x1c, 0xc2, 0x82, 0xc9, 0x06, 0x8c, 0xb3,
	0x27, 0x55, 0x7f, 0x03, 0xf9, 0x82, 0xf2, 0xab, 0x9b, 0xa7, 0xf9, 0xfe, 0x20, 0x7e, 0xdf, 0xfb,
	0xf9, 0xae, 0xd7, 0xe7, 0x37, 0x71, 0x47, 0xbb, 0x0a, 0x7d, 0xdd, 0x0f, 0xa3, 0xf8, 0x96, 0xea,
	0x9d, 0x01, 0x8d, 0xb8, 0xfe, 0x8f, 0x8f, 0x6b, 0x67, 0x21, 0x0b, 0x7e, 0xfc, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x31, 0xd7, 0xb5, 0xc1, 0x7a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagementClient interface {
	Join(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error)
	Leave(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Node, error)
	GetCluster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Cluster, error)
	Snapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	LivenessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LivenessStatus, error)
	ReadinessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadinessStatus, error)
	Get(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error)
	Set(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error)
	Watch(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (Management_WatchClient, error)
}

type managementClient struct {
	cc *grpc.ClientConn
}

func NewManagementClient(cc *grpc.ClientConn) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) Join(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Leave(ctx context.Context, in *raft.Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetNode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Node, error) {
	out := new(raft.Node)
	err := c.cc.Invoke(ctx, "/management.Management/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetCluster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*raft.Cluster, error) {
	out := new(raft.Cluster)
	err := c.cc.Invoke(ctx, "/management.Management/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Snapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) LivenessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LivenessStatus, error) {
	out := new(LivenessStatus)
	err := c.cc.Invoke(ctx, "/management.Management/LivenessProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ReadinessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ReadinessStatus, error) {
	out := new(ReadinessStatus)
	err := c.cc.Invoke(ctx, "/management.Management/ReadinessProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Get(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*KeyValuePair, error) {
	out := new(KeyValuePair)
	err := c.cc.Invoke(ctx, "/management.Management/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Set(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Delete(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/management.Management/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Watch(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (Management_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Management_serviceDesc.Streams[0], "/management.Management/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_WatchClient interface {
	Recv() (*KeyValuePair, error)
	grpc.ClientStream
}

type managementWatchClient struct {
	grpc.ClientStream
}

func (x *managementWatchClient) Recv() (*KeyValuePair, error) {
	m := new(KeyValuePair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagementServer is the server API for Management service.
type ManagementServer interface {
	Join(context.Context, *raft.Node) (*empty.Empty, error)
	Leave(context.Context, *raft.Node) (*empty.Empty, error)
	GetNode(context.Context, *empty.Empty) (*raft.Node, error)
	GetCluster(context.Context, *empty.Empty) (*raft.Cluster, error)
	Snapshot(context.Context, *empty.Empty) (*empty.Empty, error)
	LivenessProbe(context.Context, *empty.Empty) (*LivenessStatus, error)
	ReadinessProbe(context.Context, *empty.Empty) (*ReadinessStatus, error)
	Get(context.Context, *KeyValuePair) (*KeyValuePair, error)
	Set(context.Context, *KeyValuePair) (*empty.Empty, error)
	Delete(context.Context, *KeyValuePair) (*empty.Empty, error)
	Watch(*KeyValuePair, Management_WatchServer) error
}

func RegisterManagementServer(s *grpc.Server, srv ManagementServer) {
	s.RegisterService(&_Management_serviceDesc, srv)
}

func _Management_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(raft.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Join(ctx, req.(*raft.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(raft.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Leave(ctx, req.(*raft.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetNode(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetCluster(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Snapshot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_LivenessProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).LivenessProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/LivenessProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).LivenessProbe(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ReadinessProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ReadinessProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/ReadinessProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ReadinessProbe(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Get(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Set(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.Management/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Delete(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyValuePair)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).Watch(m, &managementWatchServer{stream})
}

type Management_WatchServer interface {
	Send(*KeyValuePair) error
	grpc.ServerStream
}

type managementWatchServer struct {
	grpc.ServerStream
}

func (x *managementWatchServer) Send(m *KeyValuePair) error {
	return x.ServerStream.SendMsg(m)
}

var _Management_serviceDesc = grpc.ServiceDesc{
	ServiceName: "management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Management_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Management_Leave_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Management_GetNode_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Management_GetCluster_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Management_Snapshot_Handler,
		},
		{
			MethodName: "LivenessProbe",
			Handler:    _Management_LivenessProbe_Handler,
		},
		{
			MethodName: "ReadinessProbe",
			Handler:    _Management_ReadinessProbe_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Management_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Management_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Management_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Management_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/management/management.proto",
}
